var Logger    = require('./lib/logger');
var OpsWorks  = require('./lib/Opsworks');
var StackList = require('./lib/StackList');

OpsWorks = new OpsWorks();
var filters = [];
    
OpsWorks.listStacks()
.then(OpsWorks.fetchLayers.bind(OpsWorks))
.then(function(stacks) {
  var SL = new StackList(stacks);
  filters.forEach(filter => {
    if(filter.split(':')[0] === 'layer') {
      Logger.warn("You specified a layer filter, deployments are per stack and not per layer.\nFetching deployments for stacks that match your filters.");
    }
  });
  SL.applyFilters(filters);
  return SL.stacks;
})
.then(OpsWorks.fetchDeployments.bind(OpsWorks))
.then(function(stacks) {
  stacks = stacks.map(stack => { stack.layers = []; return stack; });
  return stacks;
}).then(function(stacks) {
  // Logger.warn(`Found ${stacks.length} stacks`)
  stacks.forEach(stack => {
    stack.deployments.forEach(deployment => {
      console.log(`${deployment.CreatedAt},${deployment.Command.Name},${deployment.IamUserArn},${stack.Name}`);
    });
  });
}).catch(err => {
  Logger.error(err);
  Logger.error(`Full verbose log at ${config.logfile}`)
});
